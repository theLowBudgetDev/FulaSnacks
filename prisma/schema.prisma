
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// --- User Models ---

enum UserRole {
  ADMIN
  VENDOR
  CUSTOMER
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      UserRole @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  avatarUrl String?

  // Relations
  vendor   Vendor?
  orders   Order[]
  reviews  Review[]
}

model Vendor {
  id               String  @id @default(cuid())
  description      String
  logoUrl          String?
  campusLocation   String
  isApproved       Boolean @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  products Snack[]
}


// --- Product & Order Models ---

model Snack {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  imageUrl    String
  category    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  vendorId    String
  vendor      Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  orderItems  OrderItem[]
  reviews     Review[]
}

model Order {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  total     Float
  status    String   // "Preparing", "Ready for Pickup", "Completed", "Cancelled"

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  items     OrderItem[]
}

model OrderItem {
  id        String @id @default(cuid())
  quantity  Int
  price     Float // Price of the snack at the time of order

  // Relations
  orderId   String
  order     Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  snackId   String
  snack     Snack  @relation(fields: [snackId], references: [id])

  @@unique([snackId, orderId])
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      // 1 to 5
  comment   String?
  createdAt DateTime @default(now())

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  snackId   String
  snack     Snack    @relation(fields: [snackId], references: [id])

  @@unique([userId, snackId])
}
